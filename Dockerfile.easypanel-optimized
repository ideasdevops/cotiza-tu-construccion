# ===============================================
# DOCKERFILE OPTIMIZADO PARA COTIZADOR DE CONSTRUCCIÓN
# ===============================================
# Sistema de Deploy Automático - Taker SA
# Basado en la experiencia exitosa del proyecto cotizador_construccion
# ===============================================

FROM nginx:alpine

# ===============================================
# CONFIGURACIÓN DE LA APLICACIÓN
# ===============================================
ARG APP_NAME="cotizador-construccion"
ARG APP_VERSION="1.0.0"
ARG APP_DESCRIPTION="Cotizador online profesional para construcción Steel Frame & Industrial - Sumpetrol"
ARG PYTHON_REQUIREMENTS="fastapi uvicorn reportlab python-multipart requests aiohttp python-dotenv apscheduler asyncio-mqtt pydantic"

# ===============================================
# INSTALACIÓN DE DEPENDENCIAS DEL SISTEMA
# ===============================================
RUN apk add --no-cache \
    python3 \
    py3-pip \
    curl \
    bash \
    supervisor \
    dumb-init \
    gcc \
    python3-dev \
    musl-dev \
    linux-headers \
    build-base \
    nodejs \
    npm \
    && rm -rf /var/cache/apk/*

# ===============================================
# INSTALACIÓN DE DEPENDENCIAS PYTHON
# ===============================================
RUN pip3 install --no-cache-dir --break-system-packages $PYTHON_REQUIREMENTS

# ===============================================
# CREACIÓN DE DIRECTORIOS NECESARIOS
# ===============================================
RUN mkdir -p \
    /data/logs/nginx \
    /data/logs/supervisor \
    /data/logs/healthcheck \
    /data/logs/sistema \
    /data/backups \
    /data/data \
    /data/temp \
    /var/cache/nginx \
    /var/run \
    /tmp/nginx \
    /etc/supervisor/conf.d \
    /app/backend-python \
    /app/backend-node \
    /app/frontend

# ===============================================
# CONFIGURACIÓN DE NGINX ESPECÍFICA PARA COTIZADOR
# ===============================================
RUN echo 'events {' > /etc/nginx/nginx.conf && \
    echo '    worker_connections 1024;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo 'http {' >> /etc/nginx/nginx.conf && \
    echo '    include       /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
    echo '    default_type  application/octet-stream;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Logging' >> /etc/nginx/nginx.conf && \
    echo '    log_format main '"'"'$remote_addr - $remote_user [$time_local] "$request" '"'"' >> /etc/nginx/nginx.conf && \
    echo '                    '"'"'$status $body_bytes_sent "$http_referer" '"'"' >> /etc/nginx/nginx.conf && \
    echo '                    '"'"'"$http_user_agent" "$http_x_forwarded_for"'"'"';' >> /etc/nginx/nginx.conf && \
    echo '    access_log /data/logs/nginx/access.log main;' >> /etc/nginx/nginx.conf && \
    echo '    error_log /data/logs/nginx/error.log warn;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Basic settings' >> /etc/nginx/nginx.conf && \
    echo '    sendfile on;' >> /etc/nginx/nginx.conf && \
    echo '    tcp_nopush on;' >> /etc/nginx/nginx.conf && \
    echo '    tcp_nodelay on;' >> /etc/nginx/nginx.conf && \
    echo '    keepalive_timeout 65;' >> /etc/nginx/nginx.conf && \
    echo '    types_hash_max_size 2048;' >> /etc/nginx/nginx.conf && \
    echo '    client_max_body_size 10M;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Gzip compression' >> /etc/nginx/nginx.conf && \
    echo '    gzip on;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_vary on;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_min_length 1024;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_proxied any;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_comp_level 6;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_types' >> /etc/nginx/nginx.conf && \
    echo '        text/plain' >> /etc/nginx/nginx.conf && \
    echo '        text/css' >> /etc/nginx/nginx.conf && \
    echo '        text/xml' >> /etc/nginx/nginx.conf && \
    echo '        text/javascript' >> /etc/nginx/nginx.conf && \
    echo '        application/json' >> /etc/nginx/nginx.conf && \
    echo '        application/javascript' >> /etc/nginx/nginx.conf && \
    echo '        application/xml+rss' >> /etc/nginx/nginx.conf && \
    echo '        application/atom+xml' >> /etc/nginx/nginx.conf && \
    echo '        image/svg+xml;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Rate limiting' >> /etc/nginx/nginx.conf && \
    echo '    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Upstream for Python backend' >> /etc/nginx/nginx.conf && \
    echo '    upstream python_backend {' >> /etc/nginx/nginx.conf && \
    echo '        server localhost:8000;' >> /etc/nginx/nginx.conf && \
    echo '        keepalive 32;' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Main server block' >> /etc/nginx/nginx.conf && \
    echo '    server {' >> /etc/nginx/nginx.conf && \
    echo '        listen 80;' >> /etc/nginx/nginx.conf && \
    echo '        server_name _;' >> /etc/nginx/nginx.conf && \
    echo '        root /usr/share/nginx/html;' >> /etc/nginx/nginx.conf && \
    echo '        index index.html;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '        # Security' >> /etc/nginx/nginx.conf && \
    echo '        server_tokens off;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '        # Frontend static files' >> /etc/nginx/nginx.conf && \
    echo '        location / {' >> /etc/nginx/nginx.conf && \
    echo '            try_files $uri $uri/ /index.html;' >> /etc/nginx/nginx.conf && \
    echo '            ' >> /etc/nginx/nginx.conf && \
    echo '            # Cache static assets' >> /etc/nginx/nginx.conf && \
    echo '            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {' >> /etc/nginx/nginx.conf && \
    echo '                expires 1y;' >> /etc/nginx/nginx.conf && \
    echo '                add_header Cache-Control "public, immutable";' >> /etc/nginx/nginx.conf && \
    echo '            }' >> /etc/nginx/nginx.conf && \
    echo '        }' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '        # API endpoints - proxy to Python backend' >> /etc/nginx/nginx.conf && \
    echo '        location /api/ {' >> /etc/nginx/nginx.conf && \
    echo '            limit_req zone=api burst=20 nodelay;' >> /etc/nginx/nginx.conf && \
    echo '            ' >> /etc/nginx/nginx.conf && \
    echo '            proxy_pass http://python_backend;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_http_version 1.1;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_set_header Upgrade $http_upgrade;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_set_header Connection '"'"'upgrade'"'"';' >> /etc/nginx/nginx.conf && \
    echo '            proxy_set_header Host $host;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_cache_bypass $http_upgrade;' >> /etc/nginx/nginx.conf && \
    echo '            ' >> /etc/nginx/nginx.conf && \
    echo '            # Timeouts' >> /etc/nginx/nginx.conf && \
    echo '            proxy_connect_timeout 60s;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_send_timeout 60s;' >> /etc/nginx/nginx.conf && \
    echo '            proxy_read_timeout 60s;' >> /etc/nginx/nginx.conf && \
    echo '        }' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '        # Health check endpoint' >> /etc/nginx/nginx.conf && \
    echo '        location /health {' >> /etc/nginx/nginx.conf && \
    echo '            access_log off;' >> /etc/nginx/nginx.conf && \
    echo '            return 200 "healthy\n";' >> /etc/nginx/nginx.conf && \
    echo '            add_header Content-Type text/plain;' >> /etc/nginx/nginx.conf && \
    echo '        }' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '        # Error pages' >> /etc/nginx/nginx.conf && \
    echo '        error_page 404 /index.html;' >> /etc/nginx/nginx.conf && \
    echo '        error_page 500 502 503 504 /50x.html;' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf

# ===============================================
# COPIA DE ARCHIVOS DE LA APLICACIÓN
# ===============================================
# Copia el frontend
COPY frontend/ /usr/share/nginx/html/

# Copia el backend Python
COPY backend-python/ /app/backend-python/

# ===============================================
# SCRIPT DE INICIO OPTIMIZADO PARA COTIZADOR
# ===============================================
RUN echo '#!/bin/sh' > /start.sh && \
    echo '' >> /start.sh && \
    echo 'echo "🚀 Iniciando Cotizador de Construcción - Sumpetrol Argentina"' >> /start.sh && \
    echo 'echo "========================================="' >> /start.sh && \
    echo 'echo "Versión: '${APP_VERSION}'"' >> /start.sh && \
    echo 'echo "Descripción: '${APP_DESCRIPTION}'"' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Crear directorios necesarios' >> /start.sh && \
    echo 'mkdir -p /data/logs/nginx /var/log/nginx /var/cache/nginx /var/run /tmp/nginx' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Verificar configuración de nginx' >> /start.sh && \
    echo 'nginx -t' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Iniciar Python backend en background' >> /start.sh && \
    echo 'echo "🐍 Iniciando backend Python..."' >> /start.sh && \
    echo 'cd /app/backend-python && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Esperar un momento para que el backend se inicie' >> /start.sh && \
    echo 'sleep 5' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Iniciar nginx' >> /start.sh && \
    echo 'echo "🌐 Iniciando nginx..."' >> /start.sh && \
    echo 'nginx -g "daemon off;"' >> /start.sh

RUN chmod +x /start.sh

# ===============================================
# CONFIGURACIÓN DE SUPERVISOR
# ===============================================
RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf && \
    echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'logfile=/data/logs/supervisor.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'pidfile=/var/run/supervisord.pid' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '[program:python-backend]' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'command=cd /app/backend-python && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stderr_logfile=/data/logs/sistema/python-backend.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stdout_logfile=/data/logs/sistema/python-backend.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '[program:nginx]' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'command=nginx -g "daemon off;"' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stderr_logfile=/data/logs/nginx/error.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stdout_logfile=/data/logs/nginx/access.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf

# ===============================================
# CONFIGURACIÓN DE PUERTOS Y HEALTHCHECK
# ===============================================
EXPOSE 80

# Healthcheck optimizado para EasyPanel
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# ===============================================
# CONFIGURACIÓN DE PERMISOS
# ===============================================
RUN chown -R root:root /data && \
    chmod -R 755 /data && \
    chmod +x /start.sh

# ===============================================
# PUNTO DE ENTRADA
# ===============================================
ENTRYPOINT ["dumb-init", "--"]
CMD ["/start.sh"]
